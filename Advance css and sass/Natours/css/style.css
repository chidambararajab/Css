@charset "UTF-8";
/**
  * 0 - 600px:          Phone
  * 600px - 900px:      Tablet portrait
  * 900px - 1200px:     Tablet landscape
  * [1200px - 1800px] is where our normal(desktop first) style applies
  * 1800 + px:          Big Desktop
  * ------------------------------------------------------------------
  * $breakpoint arguement choices:
  * phone
  * tab-port
  * tab-land
  * big-desk
  *
  * ORDER: Base + typography > general layout + grid > page layout > components
*/
/*
COLORS:

$color-primary: #ccffff;
$color-primary-light: #b2ffff;
$color-primary-dark: #80cccc;
$color-primary-white: #f7f7f7;
$color-primary-black: #070707;

$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

*/
@keyframes moveInLeft {
  0% {
    opacity: 0;
    transform: translateX(-10rem); }
  80% {
    transform: translateX(1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInRight {
  0% {
    opacity: 0;
    transform: translateX(10rem); }
  80% {
    transform: translateX(-1rem); }
  100% {
    opacity: 1;
    transform: translateX(0); } }

@keyframes moveInBottom {
  0% {
    opacity: 0;
    transform: translateY(3rem); }
  80% {
    transform: translateY(-1rem); }
  100% {
    opacity: 1;
    transform: translateY(0); } }

/**
  * Selecting the after and before sudo elements with the global(*) selector is the best practice.
*/
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  /**
    * Box model change to the border-box, so that the borders and the paddings are no longer addedto the total width or the total height
    * By setting box-sizing property to inherit, I am doing the inheritance for everyelemnt for thr box-sizing by providing the box-sizing value in "body tag".
  */
  box-sizing: inherit; }

html {
  /**
    * Providing px values are wronmg and it can be sometime pain when browser size changed, so what we can do here. we can get the browser default value(px) and the value we want to assign(in this case 10px) and divide them and add them as  percentage (%) in font-size value.
    * (our-providing-font-value / browser-default-font-value(px))*100 = some percent-value
    * eg: (10/16)*100 = 62.5
    * Note: rem is not supported in older version if Internet Explorer.
  */
  font-size: 62.5%; }
  @media (max-width: 75em) {
    html {
      font-size: 50%; } }
  @media (max-width: 56.25em) {
    html {
      font-size: 43.75%; } }
  @media (min-width: 112.5em) {
    html {
      font-size: 75%; } }

body {
  /**
    * Box model change to the border-box, so that the borders and the paddings are no longer addedto the total width or the total height
  */
  box-sizing: border-box;
  padding: 3rem; }
  @media (max-width: 56.25em) {
    body {
      padding: 0; } }

body {
  /**
    * Properties relitaed to font usually inherited. Thats the reason we are declaring the font in body
  */
  font-family: "Lato", sans-serif;
  font-weight: 400;
  /**
    * 1.7 in line-height means, It will 1.7 times bigger then the pre-defined line-hight
    * (pre-defined line hight * 1.7)
  */
  line-height: 1.7;
  color: #f7f7f7; }

.heading-primary {
  text-transform: uppercase;
  /**
      * It will remove the little shake(glitch and m ove sto top little bit) from the animation(keyframes)
      * Determines whether or not the 'back' side of a transformed element is visible when facing the viewer. With an identity transform, the front side of an element faces the viewer.
     */
  backface-visibility: hidden;
  margin-bottom: 6rem; }
  .heading-primary--main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;
    animation-name: moveInLeft;
    animation-duration: 1.5s;
    /**
      * animation-timing-function: Describes how the animation will progress over one cycle of its duration.
      * we have ease-in, ease-out, ease-in-out, ease and custom timing for ease in and ese out using cubic-bezier().
    */
    animation-timing-function: ease-in;
    /**
      * animation-delay will delay the annimation mention in its section for the mentoned time.(Defines when the animation will start)
    */
    /* animation-delay: 3s; */
    /**
      * animation-iteration-count set to 3 means the animation in its section will re-do the animation for the mention number of times.
      * Defines the number of times an animation cycle is played. The default value is one, meaning the animation will play from beginning to end once.
    */
    /* animation-iteration-count: 3; */ }
    @media (max-width: 37.5em) {
      .heading-primary--main {
        letter-spacing: 1rem;
        font-size: 5rem; } }
  .heading-primary--sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;
    /**
      * Shorthand property combines six of the animation properties into a single property.
      * animation: name duration timing-function delay iteration-count direction fill-mode;
    */
    animation: moveInRight 1.5s ease-in; }
    @media (max-width: 37.5em) {
      .heading-primary--sub {
        letter-spacing: 0.5rem; } }

.heading-secondary {
  font-size: 3.5rem;
  text-transform: uppercase;
  font-weight: 700;
  letter-spacing: 0.2rem;
  display: inline-block;
  background-image: linear-gradient(to right, #7ed56f, #28b485);
  background-clip: text;
  -webkit-background-clip: text;
  color: transparent;
  transition: all 0.2s; }
  @media (max-width: 56.25em) {
    .heading-secondary {
      font-size: 3rem; } }
  @media (max-width: 37.5em) {
    .heading-secondary {
      font-size: 2.5rem; } }
  .heading-secondary:hover {
    transform: skewY(2deg) skewX(15deg) scale(1.1);
    text-shadow: 0.5rem 1rem 2rem rgba(7, 7, 7, 0.2); }

.heading-tertiary {
  font-size: 1.6rem;
  font-weight: 700;
  text-transform: uppercase; }

.paragraph {
  font-size: 1.6rem; }
  .paragraph:not(:last-child) {
    margin-bottom: 3rem; }

.u-center-text {
  text-align: center !important; }

.u-margin-bottom-small {
  margin-bottom: 1.5rem !important; }
  @media (max-width: 56.25em) {
    .u-margin-bottom-small {
      margin-bottom: 3rem !important; } }

.u-margin-bottom-medium {
  margin-bottom: 4rem !important; }
  @media (max-width: 56.25em) {
    .u-margin-bottom-medium {
      margin-bottom: 4rem !important; } }

.u-margin-bottom-big {
  margin-bottom: 8rem !important; }
  @media (max-width: 56.25em) {
    .u-margin-bottom-big {
      margin-bottom: 5rem !important; } }

.u-margin-bottom-huge {
  margin-bottom: 10rem !important; }
  @media (max-width: 56.25em) {
    .u-margin-bottom-huge {
      margin-bottom: 6rem !important; } }

.u-margin-top-small {
  margin-top: 1.5rem !important; }
  @media (max-width: 56.25em) {
    .u-margin-top-small {
      margin-bottom: 0.5rem !important; } }

.u-margin-top-medium {
  margin-top: 4rem !important; }
  @media (max-width: 56.25em) {
    .u-margin-top-medium {
      margin-bottom: 3rem !important; } }

.u-margin-top-big {
  margin-top: 8rem !important; }
  @media (max-width: 56.25em) {
    .u-margin-top-big {
      margin-bottom: 5rem !important; } }

.u-margin-top-huge {
  margin-top: 10rem !important; }
  @media (max-width: 56.25em) {
    .u-margin-top-huge {
      margin-bottom: 7rem !important; } }

.bg-video {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  z-index: -1;
  opacity: 0.15; }
  .bg-video__content {
    height: 100%;
    width: 100%;
    /**
      * Specifies how the contents of a replaced element should be scaled relative to the box established by its used height and width.
      * use case: it can be used to make a background video to fit the section.
    */
    object-fit: cover; }

.btn {
  /**
    * Reason why we style bot link and visited link: if we don't style a link at all, it will appear blue in the beginning and then once we click on it once, when we see it again, then it will be purple.
    * Note: button tag does not have sudo classes like :link and :visited. so, we need to  use &(the class itself too) to give the properties to button tag.
  */ }
  .btn, .btn:link, .btn:visited {
    text-transform: uppercase;
    text-decoration: none;
    padding: 1.5rem 6rem;
    /**
      * Compared to display: inline, the major difference is that display: inline-block allows to set a width and height on the element. Also, with display: inline-block, the top and bottom margins/paddings are respected, but with display: inline they are not.
      * Compared to display: block, the major difference is that display: inline-block does not add a line-break after the element, so the element can sit next to other elements.
    */
    display: inline-block;
    font-size: 1.6rem;
    border-radius: 10rem;
    transition: all 0.2s;
    position: relative;
    border: none;
    cursor: pointer; }
  .btn--white {
    color: #070707;
    background-color: #f7f7f7; }
    .btn--white::after {
      background-color: #f7f7f7; }
  .btn--green {
    color: #f7f7f7;
    background-color: #7ed56f; }
    .btn--green::after {
      background-color: #7ed56f; }
  .btn:hover {
    transform: translateY(-0.3rem);
    /**
      * Simply provide the shadow to the specified element.
      * offset-x | offset-y | blur-radius | color(with-less-opasity-is-preffered) 
    */
    box-shadow: 0px 1rem 2rem rgba(7, 7, 7, 0.2); }
    .btn:hover::after {
      /**
        * transform: scale(2) : scale will increese the size of the element(to presise the background) with the mentioned number provided inside the scale. in this case its twice the element size.
      */
      transform: scaleX(1.4) scaleY(1.6);
      opacity: 0; }
  .btn:active, .btn:focus {
    outline: none;
    transform: translateY(-0.1rem);
    box-shadow: 0px 0.5rem 1rem rgba(7, 7, 7, 0.2); }
  .btn::after {
    content: "";
    display: inline-block;
    height: 100%;
    width: 100%;
    border-radius: 100px;
    position: absolute;
    top: 0;
    left: 0;
    /**
      * For a positioned box, the 'z-index' property specifies the stack level of the box in the current stacking context and whether the box establishes a local stacking context.
    */
    z-index: -1;
    transition: all 0.4s; }
  .btn--animated {
    /**
      * Shorthand property combines six of the animation properties into a single property.
      * animation: name duration timing-function delay iteration-count direction fill-mode;
    */
    animation: moveInBottom 1.5s ease-in 0.75s;
    /**
      * animation-fill-mode: backwards will simply set the 0% animation of that element from the start. So the element will not be visible when it has to be visible only after mentioned secponds(which defined in animation property)
      * Defines what values are applied by the animation outside the time it is executing.
    */
    animation-fill-mode: backwards; }

.btn-text:link, .btn-text:visited {
  font-size: 1.6rem;
  color: #55c57a;
  display: inline-block;
  text-decoration: none;
  border-bottom: 1px solid #55c57a;
  padding: 3px; }

.btn-text:hover {
  background-color: #55c57a;
  color: #f7f7f7;
  box-shadow: 0 1rem 2rem rgba(7, 7, 7, 0.2);
  transform: translateY(-2px);
  transition: all 0.2s; }

.btn-text:active {
  box-shadow: 0 1rem 2rem rgba(7, 7, 7, 0.2);
  transform: translateY(0); }

.card {
  perspective: 150rem;
  -moz-perspective: 150rem;
  position: relative;
  height: 50rem; }
  .card__side {
    height: 50rem;
    transition: all 1.5s ease;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    /**
      * backface-visibility: hidden; will hide the back side(mirror side ) of the card--front and card--back components.
    */
    backface-visibility: hidden;
    border-radius: 3px;
    /**
      * If a child element overfloe the parent, it will be hidden. 
      * For example, when user add image in the child, the border-radius in parent will be no longer have rounded corders because of overflown image. 
      * We can use this overflow: hiden property to hide everything which goes outside of the parent.
      * Shorthand for setting 'overflow-x' and 'overflow-y'.
    */
    overflow: hidden;
    box-shadow: 0 1.5rem 4rem rgba(7, 7, 7, 0.15); }
    .card__side--front {
      background-color: white; }
    .card__side--back {
      transform: rotateY(180deg); }
      .card__side--back-1 {
        background-image: linear-gradient(to right bottom, #ffb900, #ff7730); }
      .card__side--back-2 {
        background-image: linear-gradient(to right bottom, #7ed56f, #28b485); }
      .card__side--back-3 {
        background-image: linear-gradient(to right bottom, #2998ff, #5643fa); }
  .card:hover .card__side--front {
    transform: rotateY(-180deg); }
  .card:hover .card__side--back {
    transform: rotateY(0); }
  .card__picture {
    height: 23rem;
    background-size: cover;
    background-blend-mode: screen;
    -webkit-clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%); }
    .card__picture--1 {
      background-image: linear-gradient(to right bottom, #ffb900, #ff7730), url(../img/nat-5.jpg); }
    .card__picture--2 {
      background-image: linear-gradient(to right bottom, #7ed56f, #28b485), url(../img/nat-6.jpg); }
    .card__picture--3 {
      background-image: linear-gradient(to right bottom, #2998ff, #5643fa), url(../img/nat-7.jpg); }
  .card__heading {
    font-size: 2.8rem;
    font-weight: 300;
    color: #f7f7f7;
    text-align: right;
    position: absolute;
    top: 20%;
    right: 10%;
    width: 50%; }
  .card__heading-span {
    padding: 0.4rem 0.6rem;
    text-transform: uppercase;
    /**
      * box-decoration-break: clone This will give spacing for before and after(for the braked single headile because of enough width)
      -webkit-box-decoration-break: clone webkit need to added for the chrome version to supporth this property(feature)
    */
    -webkit-box-decoration-break: clone;
    box-decoration-break: clone; }
    .card__heading-span--1 {
      background-image: linear-gradient(to right bottom, rgba(255, 185, 0, 0.85), rgba(255, 119, 48, 0.85)); }
    .card__heading-span--2 {
      background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.85), rgba(40, 180, 133, 0.85)); }
    .card__heading-span--3 {
      background-image: linear-gradient(to right bottom, rgba(41, 152, 255, 0.85), rgba(86, 67, 250, 0.85)); }
  .card__details {
    padding: 3rem; }
    .card__details ul {
      list-style: none;
      width: 80%;
      margin: 0 auto; }
      .card__details ul li {
        text-align: center;
        font-size: 1.5rem;
        padding: 1rem; }
        .card__details ul li:not(:last-child) {
          border-bottom: 1px solid #eee; }
  .card__cta {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 90%;
    text-align: center; }
  .card__price-box {
    color: #f7f7f7;
    margin-bottom: 8rem; }
  .card__price-only {
    font-size: 1.4rem;
    text-transform: uppercase; }
  .card__price-value {
    font-size: 6rem;
    font-weight: 200; }
  @media (max-width: 56.25em) {
    .card {
      height: auto;
      border-radius: 3px;
      background-color: white;
      box-shadow: 0 1.5rem 4rem rgba(7, 7, 7, 0.15); }
      .card__side {
        height: auto;
        position: relative;
        box-shadow: none; }
        .card__side--back {
          transform: rotateY(0);
          clip-path: polygon(0 15%, 100% 0%, 100% 100%, 0% 100%); }
      .card:hover .card__side--front {
        transform: rotateY(0); }
      .card__details {
        padding: 0.5rem 3rem; }
      .card__cta {
        position: relative;
        top: 0%;
        left: 0%;
        transform: translate(0);
        width: 100%;
        padding: 7rem 4rem 4rem 4rem; }
      .card__price-box {
        margin-bottom: 3rem; }
      .card__price-value {
        font-size: 6rem; } }

.composition {
  position: relative; }
  .composition__photo {
    width: 55%;
    box-shadow: 0 1.5rem 4rem rgba(7, 7, 7, 0.4);
    border-radius: 2px;
    position: absolute;
    z-index: 10;
    transition: all 0.2s;
    outline-offset: 2rem; }
    @media (max-width: 56.25em) {
      .composition__photo {
        float: left;
        position: relative;
        width: 33.333%;
        box-shadow: 0 1.5rem 3rem rgba(7, 7, 7, 0.2); } }
    .composition__photo--p1 {
      left: 0;
      top: -2rem; }
      @media (max-width: 56.25em) {
        .composition__photo--p1 {
          top: 1rem;
          transform: scale(1.2);
          left: 0; } }
    .composition__photo--p2 {
      right: 0;
      top: 2rem; }
      @media (max-width: 56.25em) {
        .composition__photo--p2 {
          top: -1rem;
          transform: scale(1.3);
          z-index: 100; } }
    .composition__photo--p3 {
      left: 20%;
      top: 10rem; }
      @media (max-width: 56.25em) {
        .composition__photo--p3 {
          transform: scale(1.2);
          top: 1rem;
          left: 0; } }
    .composition__photo:hover {
      outline: 1.5rem solid #55c57a;
      transform: scale(1.05) translateY(-0.5rem);
      box-shadow: 0 2.5rem 4rem rgba(7, 7, 7, 0.5);
      z-index: 20; }
  .composition:hover .composition__photo:not(:hover) {
    transform: scale(0.95); }

.feature-box {
  background-color: rgba(247, 247, 247, 0.8);
  font-size: 1.5rem;
  padding: 2.5rem;
  text-align: center;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(7, 7, 7, 0.15);
  transition: transform 0.2s; }
  .feature-box__icon {
    font-size: 6rem;
    margin-bottom: 0.5rem;
    display: inline-block;
    background-image: linear-gradient(to right, #7ed56f, #28b485);
    background-clip: text;
    -webkit-background-clip: text;
    color: transparent; }
  .feature-box:hover {
    transform: translateY(-1.5rem) scale(1.03); }

.form {
  /**
    * + will select the first(next) sibling in the html order.
  */
  /**
    * the :checked sudo class will wait untilll the radio button or check-box is selected when it does. the css written inside that will be perdormend.
  */ }
  .form__group:not(:last-child) {
    margin-bottom: 2rem; }
  .form__input {
    font-size: 1.5rem;
    font-family: inherit;
    color: inherit;
    padding: 1.5rem 2rem;
    border-radius: 2px;
    background-color: #f7f7f7;
    border: none;
    border-bottom: 3px solid transparent;
    width: 90%;
    display: block; }
    .form__input:focus {
      outline: none;
      box-shadow: 0 1rem 2rem rgba #070707, 0.1;
      border-bottom: 3px solid #7ed56f;
      /**
        * The below code silpli valid athe the vield when its focussed, like specifing @ and type anything after in email and the filed should not be empty(required).
      */ }
      .form__input:focus:invalid {
        border-bottom: 3px solid #ff7730; }
    .form__input::-webkit-input-placeholder {
      color: #999; }
  .form__label {
    font-size: 1.2rem;
    font-weight: 700;
    color: inherit;
    font-family: inherit;
    margin-left: 2rem;
    margin-top: 0.7rem;
    display: block;
    transition: all 0.3s; }
  .form__input:placeholder-shown + .form__label {
    /**
      * We can not animate with only visibility hidden, so we need to mention opacity: 0 as well..
    */
    opacity: 0;
    visibility: hidden;
    transform: translateY(-4rem); }
  .form__radio-input {
    display: none; }
  .form__radio-group {
    width: 49%;
    display: inline-block; }
    @media (max-width: 56.25em) {
      .form__radio-group {
        width: 25%; } }
    @media (max-width: 37.5em) {
      .form__radio-group {
        width: 50%;
        margin-bottom: 1.5rem; } }
  .form__radio-label {
    font-size: 1.6rem;
    cursor: pointer;
    position: relative;
    padding-left: 4.5rem; }
  .form__radio-button {
    height: 3rem;
    width: 3rem;
    border: 5px solid #28b485;
    border-radius: 50%;
    display: inline-block;
    position: absolute;
    left: 0;
    top: -0.4rem; }
    .form__radio-button::after {
      content: "";
      display: block;
      height: 1.3rem;
      width: 1.3rem;
      border-radius: 50%;
      background-color: #28b485;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      opacity: 0;
      transition: opacity 0.15s; }
  .form__radio-input:checked ~ .form__radio-label .form__radio-button::after {
    opacity: 1; }

.popup {
  z-index: 100000;
  position: fixed;
  top: 0%;
  left: 0%;
  height: 100vh;
  width: 100%;
  background-color: rgba(7, 7, 7, 0.7);
  /**
    * opasity 0 and visibility jhidden will hoide the popup sticking to the entire page.
    * opasity - Opacity of an element's text, where 1 is opaque and 0 is entirely transparent.
    * visibility - Specifies whether the boxes generated by an element are rendered. Invisible boxes still affect layout (set the ‘display’ property to ‘none’ to suppress box generation altogether).
  */
  opacity: 0;
  visibility: hidden;
  transition: all 0.3s;
  /**
    * popup:target will wait for the url to change to popup, when it does the mention css inside the :target sudo class will be aplied
  */ }
  .popup__content {
    display: table;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 75%;
    box-shadow: 0 2rem 4rem rgba(7, 7, 7, 0.7);
    background-color: #f7f7f7;
    border-radius: 5px;
    overflow: hidden;
    opacity: 0;
    transform: translate(-50%, -50%) scale(0.25);
    transition: all 0.4s 0.2s; }
  .popup__left {
    display: table-cell;
    width: 33.33%; }
  .popup__img {
    display: block;
    width: 100%; }
  .popup__right {
    display: table-cell;
    width: 66.66%;
    /**
      * vertical-align: middle: is the display: table prrperty. whech can center the tabel-cell(to be presice tabel-cell mentioned element).
    */
    vertical-align: middle;
    padding: 3rem 5rem;
    color: #070707; }
  .popup__text {
    font-size: 1.4rem;
    margin-bottom: 4rem;
    /**
      * column-count: 2 is a table property. Whcih can split the one single paragraph to two or more columns paragraph(kinda like news paper look and feel)
      * Describes the optimal number of columns into which the content of the element will be flowed.
    */
    column-count: 2;
    /**
      * column-gap: 4rem is a table property.
      * Sets the gap between columns. If there is a column rule between columns, it will appear in the middle of the gap.
    */
    column-gap: 4rem;
    /**
      * column-gap: 4rem is a table property. this will add the thin line between the columns
      * Shorthand for setting 'column-rule-width', 'column-rule-style', and 'column-rule-color' at the same place in the style sheet. Omitted values are set to their initial values.
    */
    column-rule: 1px solid #eee;
    /**
      * Controls whether hyphenation is allowed to create more break opportunities within a line of text.
      * hyphens: auto will add hyfen(-) when the word is not contained in the specified space.
      * It will brake the word in two if there is not enough space(just ;like a news paper)
    */
    -moz-hyphens: auto;
    -ms-hyphens: auto;
    -webkit-hyphens: auto;
    hyphens: auto; }
  .popup:target {
    opacity: 1;
    visibility: visible; }
  .popup:target .popup__content {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1); }
  .popup__close:link, .popup__close:visited {
    color: #999;
    position: absolute;
    top: 2.5rem;
    right: 2.5rem;
    font-size: 4rem;
    text-decoration: none;
    line-height: 1;
    display: block; }
  .popup__close:hover {
    color: #28b485; }

.story {
  width: 75%;
  margin: 0 auto;
  box-shadow: 0 3rem 6rem rgba(7, 7, 7, 0.1);
  background-color: rgba(247, 247, 247, 0.5);
  border-radius: 3px;
  padding: 6rem;
  padding-left: 9rem;
  font-size: 1.6rem;
  transform: skewX(-12deg);
  margin-bottom: 4rem; }
  @media (max-width: 37.5em) {
    .story {
      transform: skew(0); } }
  @media (max-width: 56.25em) {
    .story {
      width: 100%;
      padding: 4rem;
      padding-left: 7rem; } }
  .story__shape {
    width: 15rem;
    height: 15rem;
    float: left;
    -webkit-shape-outside: circle(50% at 50% 50%);
    shape-outside: circle(50% at 50% 50%);
    -webkit-clip-path: circle(50% at 50% 50%);
    clip-path: circle(50% at 50% 50%);
    transform: translateX(-3rem) skewX(12deg);
    position: relative; }
    @media (max-width: 37.5em) {
      .story__shape {
        transform: translateX(-3rem) skew(0); } }
  .story__img {
    height: 100%;
    transform: translateX(-4rem) scale(1.2);
    transition: all 0.5s; }
  .story__text {
    transform: skewX(12deg); }
    @media (max-width: 37.5em) {
      .story__text {
        transform: skew(0); } }
  .story__caption {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, 20%);
    color: #f7f7f7;
    text-transform: uppercase;
    font-size: 1.7rem;
    text-align: center;
    opacity: 0;
    transition: all 0.5s;
    backface-visibility: hidden; }
  .story:hover .story__caption {
    opacity: 1;
    transform: translate(-50%, -50%); }
  .story:hover .story__img {
    transform: translateX(-4rem) scale(1);
    /**
      * Processes an element’s rendering before it is displayed in the document, by applying one or more filter effects.
    */
    filter: blur(3px) brightness(80%); }

.footer {
  background-color: #333;
  font-size: 1.4rem;
  padding: 10rem 0; }
  @media (max-width: 56.25em) {
    .footer {
      padding: 8rem 0;
      width: 100%; } }
  .footer__logo-box {
    text-align: center;
    margin-bottom: 7rem; }
    @media (max-width: 56.25em) {
      .footer__logo-box {
        margin-bottom: 4rem; } }
  .footer__logo {
    width: 15rem;
    height: auto; }
  .footer__navigation {
    border-top: 1px solid #999;
    padding-top: 2rem;
    display: inline-block; }
    @media (max-width: 56.25em) {
      .footer__navigation {
        width: 100%;
        text-align: center; } }
  .footer__list {
    list-style: none; }
  .footer__item {
    display: inline-block; }
    .footer__item:not(:last-child) {
      margin-right: 1.5rem; }
  .footer__link:link, .footer__link:visited {
    color: #f7f7f7;
    text-decoration: none;
    text-transform: uppercase;
    display: inline-block;
    transition: all 0.2s; }
  .footer__link:hover, .footer__link:active {
    color: #7ed56f;
    box-shadow: 0 1rem 2rem rgba(7, 7, 7, 0.6);
    transform: rotate(7deg) scale(1.1); }
  .footer__copyright {
    color: #f7f7f7;
    border-left: 1px solid #999;
    padding-left: 2rem;
    display: inline-block; }
    @media (max-width: 56.25em) {
      .footer__copyright {
        float: none;
        width: 100%; } }

.row {
  width: 100%;
  max-width: 110rem;
  margin: 0 auto;
  color: #070707;
  content: "";
  display: table;
  clear: both; }
  .row:not(:last-chid) {
    margin-bottom: 8rem; }
    @media (max-width: 56.25em) {
      .row:not(:last-chid) {
        margin-bottom: 6rem; } }
    @media (max-width: 37.5em) {
      .row:not(:last-chid) {
        margin-bottom: 4rem; } }
  @media (max-width: 56.25em) {
    .row {
      max-width: 50rem;
      padding: 0 3rem; } }
  .row [class^="col-"] {
    float: left; }
    .row [class^="col-"]:not(:last-child) {
      margin-right: 6rem; }
      @media (max-width: 56.25em) {
        .row [class^="col-"]:not(:last-child) {
          margin-right: 0;
          margin-bottom: 6rem; } }
      @media (max-width: 37.5em) {
        .row [class^="col-"]:not(:last-child) {
          margin-right: 0;
          margin-bottom: 4rem; } }
    @media (max-width: 56.25em) {
      .row [class^="col-"] {
        width: 100% !important; } }
  .row .col-1-of-2 {
    width: calc((100% - 6rem) / 2); }
  .row .col-1-of-3 {
    width: calc((100% - 2 * 6rem) / 3); }
  .row .col-2-of-3 {
    width: calc( 2 * ((100% - 2 * 6rem) / 3) + 6rem); }
  .row .col-1-of-4 {
    width: calc((100% - 3 * 6rem) / 4); }
  .row .col-2-of-4 {
    width: calc( 2 * ((100% - 3 * 6rem) / 4) + 6rem); }
  .row .col-3-of-4 {
    width: calc( 3 * ((100% - 3 * 6rem) / 4) + 2 * 6rem); }

.header {
  height: 95vh;
  /**
      * linear-gradient will give the color top of the image or bacside of the image(depends on it defined in fist or last).
      * We can reduce the opasity of the color to giv ethe shade and provide in which side the color goes like 'to right left', 'to right bottom'
     */
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/hero.jpg");
  /**
      * Specifies the size of the background images.
      * what background-size: cover does is that whatever the width of the viewport, or the element, it'll always try to fit the element inside of the box.
     */
  background-size: cover;
  /**
      * Specifies the initial position of the background image(s) (after any resizing) within their corresponding background positioning area
      * what background-position: top does is the top of the image will always stick, when the browser size is shrinked. we can shange the position to bottom, left, right, center, top as well.
     */
  background-position: top;
  -webkit-clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /**
      * clip-path will helps to add the shape or crop the display image or background using the x y corordinates
      * Syntax: clip-path: polygon(leftTop(x y), leftBottom(x y), rightBottom(x y), rightTop(x y))
      * Note: you can add more and more check points, the checkpoints will go clock wise.
      * Use this generate the clip-paths: polygon https://bennettfeely.com/clippy/
     */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  position: relative; }
  @media (max-width: 56.25em) {
    .header {
      height: 97vh; } }
  @media (max-width: 37.5em) {
    .header {
      -webkit-clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%);
      clip-path: polygon(0 0, 100% 0, 100% 85vh, 0 100%); } }
  .header__logo-box {
    position: absolute;
    top: 4rem;
    left: 4rem; }
  .header__logo {
    height: 3.5rem; }
  .header__text-box {
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center; }

.navigation__checkbox {
  display: none; }

.navigation__button {
  z-index: 300;
  height: 7rem;
  width: 7rem;
  background-color: #f7f7f7;
  border-radius: 50%;
  position: fixed;
  top: 6rem;
  right: 6rem;
  box-shadow: 0 1rem 3rem rgba(7, 7, 7, 0.4);
  text-align: center;
  cursor: pointer; }
  @media (max-width: 56.25em) {
    .navigation__button {
      top: 4rem;
      right: 4rem; } }
  @media (max-width: 37.5em) {
    .navigation__button {
      top: 3rem;
      right: 3rem; } }

.navigation__background {
  z-index: 100;
  height: 6rem;
  width: 6rem;
  border-radius: 50%;
  position: fixed;
  top: 6.5rem;
  right: 6.5rem;
  /**
      * background-image: radial-gradient
      * linear-gradient will gradient the element from one direction to another direction.
      * radial-gradient will start the gradient from center of the element(or page).
    */
  background-image: radial-gradient(#7ed56f, #28b485);
  /**
      * the below code will transition the transform property(when is mention when the burgger button is clicked or active). it will give the animation instead of scalling it normally.
    */
  transition: transform 0.8s cubic-bezier(0.86, 0, 0.07, 1); }
  @media (max-width: 56.25em) {
    .navigation__background {
      top: 4.5rem;
      right: 4.5rem; } }
  @media (max-width: 37.5em) {
    .navigation__background {
      top: 3.5rem;
      right: 3.5rem; } }

.navigation__nav {
  z-index: 200;
  height: 100vh;
  position: fixed;
  top: 0;
  right: 0;
  /**
      * Opacity 0 will invisible the component but the links and component will be there, so solving this problem we can assign with to 0% that will hide the total component.
    */
  opacity: 0;
  width: 0;
  visibility: hidden;
  /**
      * The cubic-bezier() function defines a Cubic Bezier curve.
      * cubic-bezier will give the animation effect to the transition properties[elements]
    */
  transition: all 0.8s cubic-bezier(0.68, -0.55, 0.265, 1.55); }

.navigation__list {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  list-style: none;
  text-align: center; }

.navigation__item {
  margin: 1rem 0;
  transition: all 0.2s; }

.navigation__link:link, .navigation__link:visited {
  display: inline-block;
  font-size: 3rem;
  font-weight: 300;
  color: #f7f7f7;
  text-decoration: none;
  text-transform: uppercase;
  padding: 0.5rem 1rem;
  background-image: linear-gradient(120deg, transparent 0%, transparent 50%, #f7f7f7 50%);
  background-size: 240%;
  transition: all 0.4s; }
  @media (max-width: 37.5em) {
    .navigation__link:link, .navigation__link:visited {
      font-size: 2.2rem; } }

.navigation__link:hover, .navigation__link:active {
  background-position: 100%;
  color: #28b485;
  transform: translateX(1rem); }

.navigation__link span {
  display: inline-block;
  margin-right: 1.5rem; }

.navigation__checkbox:checked ~ .navigation__background {
  transform: scale(80); }

.navigation__checkbox:checked ~ .navigation__nav {
  width: 100%;
  opacity: 1;
  visibility: visible; }

.navigation__icon {
  position: relative;
  margin-top: 3.5rem; }
  .navigation__icon, .navigation__icon::before, .navigation__icon::after {
    width: 3rem;
    height: 2px;
    background-color: #070707;
    display: inline-block; }
  .navigation__icon::before, .navigation__icon::after {
    content: "";
    position: absolute;
    left: 0;
    transition: all 0.4s; }
  .navigation__icon::before {
    top: -0.8rem; }
  .navigation__icon::after {
    top: 0.8rem; }

.navigation__button:hover .navigation__icon::before {
  top: -0.9rem; }

.navigation__button:hover .navigation__icon::after {
  top: 0.9rem; }

.navigation__checkbox:checked + .navigation__button .navigation__icon {
  background-color: transparent; }

.navigation__checkbox:checked + .navigation__button .navigation__icon::before {
  top: 0;
  transform: rotate(135deg); }

.navigation__checkbox:checked + .navigation__button .navigation__icon::after {
  top: 0;
  transform: rotate(-135deg); }

.section-about {
  background-color: #f7f7f7;
  padding: 25rem 0;
  margin-top: -20vh; }
  @media (max-width: 56.25em) {
    .section-about {
      padding: 22rem 0 22rem 0; } }

.section-features {
  padding: 20rem 0;
  margin-top: -12vh;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)), url("../img/nat-4.jpg");
  background-size: cover;
  /**
    * These below two line will give the wide style of the screeen with the regular childrens.
    * 1st transform: skewY(-7deg) will make the total section-feature to wide style (it will make the inside child wide skewY as well).
    * Since it will wide the children too, we need to reverse them to see the proper components. we can reverse them by using the same value with posiive (+) number. (-7 means +7)
  */
  transform: skewY(-7deg); }
  @media (max-width: 56.25em) {
    .section-features {
      padding: 8rem 0; } }
  .section-features > * {
    transform: skewY(7deg); }

.section-tours {
  background-color: #f7f7f7;
  padding: 25rem 0 15rem 0;
  margin-top: -12vh; }
  @media (max-width: 56.25em) {
    .section-tours {
      padding: 15rem 0 7rem 0;
      margin-top: -10vh; } }
  @media (max-width: 37.5em) {
    .section-tours {
      padding: 15rem 0 0.5rem 0; } }

.section-stories {
  position: relative;
  padding: 10rem 0; }

.section-book {
  padding: 15rem 0;
  background-image: linear-gradient(to right bottom, rgba(126, 213, 111, 0.8), rgba(40, 180, 133, 0.8)); }
  @media (max-width: 56.25em) {
    .section-book {
      padding: 10rem 0; } }

.book {
  width: 90vw;
  /**
    * The degree will give the angle to the gradient line, the first color to the second color, it will give a smooth gradient of white after that evrything will be transprent because we provide same percentage in both of them(white and transprent).
    * This will give a solid cut like clip path (but using linear-gradient).
  */
  background-image: linear-gradient(105deg, rgba(247, 247, 247, 0.8) 0%, rgba(247, 247, 247, 0.8) 50%, transparent 50%), url(../img/nat-10.jpg);
  background-size: cover;
  border-radius: 3px;
  box-shadow: 0 1.5rem 4rem rgba(7, 7, 7, 0.8); }
  @media (max-width: 75em) {
    .book {
      background-image: linear-gradient(105deg, rgba(247, 247, 247, 0.8) 0%, rgba(247, 247, 247, 0.8) 65%, transparent 65%), url(../img/nat-10.jpg);
      background-size: cover; } }
  @media (max-width: 56.25em) {
    .book {
      background-image: linear-gradient(to right, rgba(247, 247, 247, 0.8) 0%, rgba(247, 247, 247, 0.8) 100%), url(../img/nat-10.jpg); } }
  .book__form {
    width: 50%;
    padding: 6rem; }
    @media (max-width: 75em) {
      .book__form {
        width: 65%; } }
    @media (max-width: 56.25em) {
      .book__form {
        width: 100%; } }
