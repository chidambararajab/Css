body {
  margin: 0;
}

.container {
  border: 6px solid black;
  /**
    * The below code will make the flex-items lay down to left to right, Also you can check the border of the container take 100% (like a block level element).
   */
  display: flex;
  height: 400px;

  /**
    * If you don't want a block level flex container, you set the display property to the inline flex, Check the below code for the reference.
  */
  /* display: inline-flex; */

  /**
    * flex-direction: row : flex direction row is the default property and it set the Main axis to left to right.
  */
  /* flex-direction: row; */

  /**
    * flex-direction: row-reverse flex direction row-reverse will set the Main axis to right to left.
  */
  /* flex-direction: row-reverse; */

  /**
    * flex-direction: column : when you set flex direction to column. The main access flows from top to bottom. So the items are now stacked on top of each other.
  */
  /* flex-direction: column; */

  /**
    * flex-direction: row-reverse flex direction row-reverse will set the Main axis to right to left.
  */
  /* flex-direction: column-reverse; */

  /**
    * flex-wrap: which is default wraping.
  */
  /* flex-wrap: nowrap; */

  /**
    * flex-wrap: wrap : wrap will move the items to the bottom new line when there is not enough space.
  */
  /* flex-wrap: wrap; */

  /**
    * flex-wrap: wrap-reverse : wrap-reverse will move the items to the top line when there is not enough space instead of moving them in bottom line
  */
  /* flex-wrap: wrap-reverse; */

  /**
    * flex-flow: <flex-direction> <flex-wrap>
  */
  /* flex-flow: row wrap; */

  /**
    * flex-flow: <flex-direction> <flex-wrap>
  */
  /* flex-flow: column wrap-reverse; */

  /**
    * justify-content: flex-start : flex items will pushed to the start of main axis of the current line of the flex container (without any spaces between the container)
  */
  /* justify-content: flex-stat; */

  /**
    * justify-content: flex-end : flex items will pushed to the end of main axis of the current line of the flex container (without any spaces between the container and the Item order will never change)
  */
  /* justify-content: flex-end; */

  /**
    * justify-content: center : flex items will pushed to the center of main axis of the current line of the flex container (without any spaces between the container)
  */
  /* justify-content: center; */

  /**
    * justify-content: space-between : The extra space that was left out is evenly split through the flex items (main axis)
  */
  /* justify-content: space-between; */

  /**
    * justify-content: space-around : The extra space that was left out is evenly split through the left and right side of the flex items (main axis)
    * Note: Sometime you also want space before and after the first and last flex-item, in such scenario this will be used.
  */
  /* justify-content: space-around; */

  /**
    * justify-content: space-evenly : The extra space that was left out is evenly split through the all side of the flex items (main axis)

    * Note: Sometime you want exact space between flex-item, in such scenario this will be used.
  */
  /* justify-content: space-evenly; */

  /**
    * justify-content: space-between : The extra space that was left out is evenly split through the flex items (main axis)
  */
  /* align-items: stretch; */

  /**
    * justify-content: space-between : The extra space that was left out is evenly split through the flex items (main axis)
  */
  /* align-items: flex-start; */

  /**
    * justify-content: space-between : The extra space that was left out is evenly split through the flex items (main axis)
  */
  /* align-items: flex-end; */

  /**
    * justify-content: space-between : The extra space that was left out is evenly split through the flex items (main axis)
  */
  /* align-items: center; */

  /**
    * justify-content: space-between : The extra space that was left out is evenly split through the flex items (main axis)
  */
  /* align-items: baseline; */

  /**
    * align-content: stretch : This is the default property. And flex-item will move to next line when there isn't enough space for them.
  */
  /* align-content: stretch; */

  /**
    * align-content: flex-start : Lines are packed toward the start of the flex container
  */
  /* align-content: flex-start; */

  /**
    * align-content: flex-end : Lines are packed toward the end of the flex container
  */
  /* align-content: flex-end; */

  /**
    * align-content: center : Lines are packed toward the center of the flex container
  */
  /* align-content: center; */

  /**
    * align-content: space-between : All the space is in-between the two lines (Lines are evenly distributed in the flex container).
  */
  /* align-content: space-between; */

  /**
    * align-content: space-around : All the space are evenly spread around the two lines (Lines are evenly distributed in the flex container, with half-size spaces on either end).
  */
  /* align-content: space-around; */
}

.flex-item {
  color: white;
  font-size: 1.5rem;
  padding: 1rem;
  text-align: center;
}

.item-1 {
  background-color: #b4bf35;
}
.item-2 {
  background-color: #bf8335;
}
.item-3 {
  background-color: #355abf;
}
.item-4 {
  background-color: #e9ec4c;
}
.item-5 {
  background-color: #5f0606;
}
.item-6 {
  background-color: #3575bf;
}
.item-7 {
  background-color: #f1d142;
}
.item-8 {
  background-color: #31c9e4;
}
.item-9 {
  background-color: #63c23e;
}
